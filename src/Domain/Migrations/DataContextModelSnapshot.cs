// <auto-generated />
using System;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("Domain.Entity.Diabetes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Diabetes");
                });

            modelBuilder.Entity("Domain.Entity.DiabetesItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DiabetesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Result")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DiabetesId");

                    b.ToTable("DiabetesItems");
                });

            modelBuilder.Entity("Domain.Entity.Hearing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Hearings");
                });

            modelBuilder.Entity("Domain.Entity.HearingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ear")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HearingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Result")
                        .HasColumnType("TEXT");

                    b.Property<int>("V1000")
                        .HasColumnType("INTEGER");

                    b.Property<int>("V2000")
                        .HasColumnType("INTEGER");

                    b.Property<int>("V250")
                        .HasColumnType("INTEGER");

                    b.Property<int>("V4000")
                        .HasColumnType("INTEGER");

                    b.Property<int>("V500")
                        .HasColumnType("INTEGER");

                    b.Property<int>("V8000")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HearingId");

                    b.ToTable("HearingItems");
                });

            modelBuilder.Entity("Domain.Entity.Sickness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sicknesses");
                });

            modelBuilder.Entity("Domain.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entity.UserSickness", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SicknessId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "SicknessId");

                    b.HasIndex("SicknessId");

                    b.ToTable("UserSicknesses");
                });

            modelBuilder.Entity("Domain.Entity.Diabetes", b =>
                {
                    b.HasOne("Domain.Entity.User", null)
                        .WithMany("Diabetes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entity.DiabetesItem", b =>
                {
                    b.HasOne("Domain.Entity.Diabetes", null)
                        .WithMany("Items")
                        .HasForeignKey("DiabetesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entity.Hearing", b =>
                {
                    b.HasOne("Domain.Entity.User", null)
                        .WithMany("Hearings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entity.HearingItem", b =>
                {
                    b.HasOne("Domain.Entity.Hearing", null)
                        .WithMany("Items")
                        .HasForeignKey("HearingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entity.UserSickness", b =>
                {
                    b.HasOne("Domain.Entity.Sickness", "Sickness")
                        .WithMany()
                        .HasForeignKey("SicknessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.User", "User")
                        .WithMany("UserSicknessList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sickness");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entity.Diabetes", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entity.Hearing", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entity.User", b =>
                {
                    b.Navigation("Diabetes");

                    b.Navigation("Hearings");

                    b.Navigation("UserSicknessList");
                });
#pragma warning restore 612, 618
        }
    }
}
